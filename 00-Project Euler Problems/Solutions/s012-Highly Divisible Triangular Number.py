'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

################# PSEUDO CODE ##################################

'''
WHAT ALL WE KNOW?
Triangle numbers are nothing but sum of the natural numbers up till the mentioned number
1st = 1+0 = 1
2nd = 1+2 = 3
3rd = 1+2+3 = 6
4th = 1+2+3+4 = 10
.
.
.
sum of natural numbers = [n*(n+1)]/2

PSEUDO CODE - 
- using itertools 
- to cal num of divisors 
'''
import itertools, timeit
from math import sqrt

start = timeit.default_timer()
def triangleNum():
    triangle = 0
    for i in itertools.count(1):
        triangle += i
        if numDivisors(triangle)>=500:
            return triangle

def numDivisors(n):
    flag = int(sqrt(n))
    result = sum(2 for i in range(1,flag+1) if n%i==0)
    return result

if __name__ == '__main__':
    print(triangleNum())

stop = timeit.default_timer()
print('Time: ',stop-start)